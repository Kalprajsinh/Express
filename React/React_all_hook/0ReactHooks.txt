1. useState
useState is a Hook that allows functional components in React to manage local state. It returns a pair: the current state value and a function that lets you update it. When you call this function, React schedules a re-render of the component, reflecting the updated state.

Example:

import React, { useState } from 'react';

const Counter = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};

export default Counter;
In this example, useState(0) initializes the state count to 0, and setCount is the function used to update count.

2. useEffect
useEffect is a Hook that allows you to perform side effects in function components. It runs after every render and can perform tasks like data fetching, DOM manipulation, or subscribing to external events.

Example:

import React, { useState, useEffect } from 'react';

const UserData = ({ userId }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    // Fetch user data based on userId
    fetch(`https://jsonplaceholder.typicode.com/users/${userId}`)
      .then(response => response.json())
      .then(data => setUser(data))
      .catch(error => console.error('Error fetching user data:', error));
  }, [userId]);

  return (
    <div>
      {user ? (
        <div>
          <h2>{user.name}</h2>
          <p>Email: {user.email}</p>
        </div>
      ) : (
        <p>Loading user data...</p>
      )}
    </div>
  );
};

export default UserData;
Here, useEffect fetches user data whenever userId changes. The empty dependency array ([]) as the second argument means the effect runs only once, similar to componentDidMount in class components.

3. useMemo
useMemo is a Hook that memoizes the result of a function and re-computes it only if one of the dependencies has changed. It helps optimize performance by caching expensive calculations.

Example:

import React, { useMemo } from 'react';

const Fibonacci = ({ n }) => {
  const fib = useMemo(() => {
    if (n <= 1) return n;
    return Fibonacci(n - 1) + Fibonacci(n - 2);
  }, [n]);

  return <p>Fibonacci of {n} is {fib}</p>;
};

export default Fibonacci;
In this example, useMemo caches the calculation of Fibonacci numbers based on n, recalculating only when n changes.

4. useCallback
useCallback is a Hook that memoizes callbacks to avoid unnecessary re-renders in child components that rely on reference equality. It returns a memoized version of the callback function that only changes if one of the dependencies has changed.

Example:

import React, { useState, useCallback } from 'react';

const Counter = () => {
  const [count, setCount] = useState(0);

  const increment = useCallback(() => {
    setCount(prevCount => prevCount + 1);
  }, []);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
};

export default Counter;
Here, useCallback ensures that increment remains the same reference across renders as long as the dependencies ([] in this case) don't change, preventing unnecessary re-renders of components that use increment.

These Hooks (useState, useEffect, useMemo, useCallback) are fundamental to managing state, side effects, and performance optimizations in React functional components.