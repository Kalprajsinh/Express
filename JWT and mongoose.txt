JWT and mongoose
================

JWT

first signup page of frontend - this send request of username and password to backend this backend convert password into hash # - then checks from database then return JWT to frontend this JWT store into client side local storage ______ when server need to user authentication not need to send username and password every time it send JWT and backend verify is that JWT is correct or not if correct then give access
---------------------------------------------------

--------------------------------------------------
How to mongodb ?  :- monodb atlas (cloud)
----------------

+ New Project
create cluster
create deployment

copy your username and password
kalpraj51
dYt7CIyDXwi6gZbL

Choose a connection method 
Drivers

copy URL
mongodb+srv://kalpraj51:dYt7CIyDXwi6gZbL@cluster0.qfsnyra.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

just put this url into code

------------------------------------------

const express = require("express");
const jwt = require("jsonwebtoken");
const mongoose = require("mongoose");

mongoose.connect('mongodb+srv://kalpraj51:dYt7CIyDXwi6gZbL@cluster0.qfsnyra.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("Connected to Database"))
  .catch((error) => console.log("Error in Connecting to Database:", error));


const User = mongoose.model("user", {
    name: String,
    username: String,
    password: String,
});

app.post("/", async function(req,res){
    const newItem = new User({
        name: req.body.name,
        username: req.body.username,
        pasword: req.body.pasword
      });
      
      try {
        const savedItem = await newItem.save();
        res.status(201).json(savedItem);
      } catch (error) {
        res.status(400).send(error);
      }
})

const app = express();
app.use(express.json());

app.listen(3000);

----------------------------------------------------------

let make password into hash # 
-----------------------------

npm install bcrypt
const bcrypt = require('bcrypt');

const hashedPassword = await bcrypt.hash(req.body.password, 10);

----------------------------------------------------------------

all code with JWT
-----------------

const express = require("express");
const jwt = require("jsonwebtoken");
const mongoose = require("mongoose");
const bcrypt = require('bcrypt');

const jwtPassword = "123456";

mongoose.connect('mongodb+srv://kalpraj51:dYt7CIyDXwi6gZbL@cluster0.qfsnyra.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("Connected to Database"))
  .catch((error) => console.log("Error in Connecting to Database:", error));

const User = mongoose.model("user", {
    name: String,
    username: String,
    password: String,
});

const app = express();
app.use(express.json());

app.post("/", async function(req, res) {
    try {
        const hashedPassword = await bcrypt.hash(req.body.password, 10);

        const newuser = new User({
            name: req.body.name,
            username: req.body.username,
            password: hashedPassword 
        });

        const saveduser = await newuser.save();
        
        var token = jwt.sign({ username: req.body.username }, jwtPassword); // Use a separate secret key

        res.status(201).json({
            user: saveduser,
            token
        });

    } catch (error) {
        res.status(400).send(error);
    }
});

app.get("/", function (req, res) {
    const token = req.headers.token;
    
    try {
      const decoded = jwt.verify(token, jwtPassword);
      const username = decoded.username;
      res.send(username);
      
    } catch (err) {
      return res.status(403).json({
        msg: "Invalid token",
      });
    }
  });

app.listen(3000, () => {
    console.log("Server is running on port 3000");
});


